/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Tue Jul 24 16:01:55 2018. */

#ifndef PB_GATE_PB_H_INCLUDED
#define PB_GATE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _GateCardType {
    GateCardType_GATE_TYPE_HOME = 1,
    GateCardType_GATE_TYPE_BUILDING_UNIT = 2,
    GateCardType_GATE_TYPE_COMMUNITY = 3,
    GateCardType_GATE_TYPE_COMPANY = 4,
    GateCardType_GATE_TYPE_MI = 5
} GateCardType;
#define _GateCardType_MIN GateCardType_GATE_TYPE_HOME
#define _GateCardType_MAX GateCardType_GATE_TYPE_MI
#define _GateCardType_ARRAYSIZE ((GateCardType)(GateCardType_GATE_TYPE_MI+1))

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(18) GateCardInfo_aid_t;
typedef struct _GateCardInfo {
    GateCardInfo_aid_t aid;
    char name[20];
    bool has_type;
    GateCardType type;
/* @@protoc_insertion_point(struct:GateCardInfo) */
} GateCardInfo;

typedef PB_BYTES_ARRAY_T(10) GateCheckResult_uid_t;
typedef struct _GateCheckResult {
    int32_t code;
    bool has_uid;
    GateCheckResult_uid_t uid;
/* @@protoc_insertion_point(struct:GateCheckResult) */
} GateCheckResult;

typedef struct _GateCreateAck {
    int32_t code;
/* @@protoc_insertion_point(struct:GateCreateAck) */
} GateCreateAck;

typedef PB_BYTES_ARRAY_T(18) GateCreateParam_aid_t;
typedef struct _GateCreateParam {
    GateCreateParam_aid_t aid;
/* @@protoc_insertion_point(struct:GateCreateParam) */
} GateCreateParam;

typedef struct _GateDeleteAck {
    int32_t code;
/* @@protoc_insertion_point(struct:GateDeleteAck) */
} GateDeleteAck;

typedef PB_BYTES_ARRAY_T(18) GateDeleteParam_aid_t;
typedef struct _GateDeleteParam {
    GateDeleteParam_aid_t aid;
/* @@protoc_insertion_point(struct:GateDeleteParam) */
} GateDeleteParam;

typedef struct _GetGateInfoListResult {
    pb_size_t card_infos_count;
    GateCardInfo card_infos[8];
/* @@protoc_insertion_point(struct:GetGateInfoListResult) */
} GetGateInfoListResult;

/* Default values for struct fields */

/* Initializer values for message structs */
#define GateCheckResult_init_default             {0, false, {0, {0}}}
#define GateCreateParam_init_default             {{0, {0}}}
#define GateCreateAck_init_default               {0}
#define GateCardInfo_init_default                {{0, {0}}, "", false, (GateCardType)0}
#define GetGateInfoListResult_init_default       {0, {GateCardInfo_init_default, GateCardInfo_init_default, GateCardInfo_init_default, GateCardInfo_init_default, GateCardInfo_init_default, GateCardInfo_init_default, GateCardInfo_init_default, GateCardInfo_init_default}}
#define GateDeleteParam_init_default             {{0, {0}}}
#define GateDeleteAck_init_default               {0}
#define GateCheckResult_init_zero                {0, false, {0, {0}}}
#define GateCreateParam_init_zero                {{0, {0}}}
#define GateCreateAck_init_zero                  {0}
#define GateCardInfo_init_zero                   {{0, {0}}, "", false, (GateCardType)0}
#define GetGateInfoListResult_init_zero          {0, {GateCardInfo_init_zero, GateCardInfo_init_zero, GateCardInfo_init_zero, GateCardInfo_init_zero, GateCardInfo_init_zero, GateCardInfo_init_zero, GateCardInfo_init_zero, GateCardInfo_init_zero}}
#define GateDeleteParam_init_zero                {{0, {0}}}
#define GateDeleteAck_init_zero                  {0}

/* Field tags (for use in manual encoding/decoding) */
#define GateCardInfo_aid_tag                     1
#define GateCardInfo_name_tag                    2
#define GateCardInfo_type_tag                    3
#define GateCheckResult_code_tag                 1
#define GateCheckResult_uid_tag                  2
#define GateCreateAck_code_tag                   1
#define GateCreateParam_aid_tag                  1
#define GateDeleteAck_code_tag                   1
#define GateDeleteParam_aid_tag                  1
#define GetGateInfoListResult_card_infos_tag     1

/* Struct field encoding specification for nanopb */
extern const pb_field_t GateCheckResult_fields[3];
extern const pb_field_t GateCreateParam_fields[2];
extern const pb_field_t GateCreateAck_fields[2];
extern const pb_field_t GateCardInfo_fields[4];
extern const pb_field_t GetGateInfoListResult_fields[2];
extern const pb_field_t GateDeleteParam_fields[2];
extern const pb_field_t GateDeleteAck_fields[2];

/* Maximum encoded size of messages (where known) */
#define GateCheckResult_size                     23
#define GateCreateParam_size                     20
#define GateCreateAck_size                       11
#define GateCardInfo_size                        44
#define GetGateInfoListResult_size               368
#define GateDeleteParam_size                     20
#define GateDeleteAck_size                       11

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define GATE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
